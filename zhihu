import platform

import os
from time import sleep

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


def add_chrome_webdriver():
    print(platform.system())
    working_path = os.getcwd()
    library = 'library'
    path = os.path.join(working_path, library)
    os.environ['PATH'] += '{}{}{}'.format(os.pathsep, path, os.pathsep)
    print(os.environ['PATH'])


def find_website(browser):
    # Visit URL
    url = "http://www.baidu.com"
    browser.get(url)

    # 找到输入框并且输入
    input = browser.find_element_by_css_selector('#kw')
    input.send_keys('selenium-python')

    # 找到按钮并且点击
    button = browser.find_element_by_css_selector('#su')
    button.click()

    # sleep(1)
    WebDriverWait(browser, 1).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, ".nums_text"))
    )

    results = browser.find_elements_by_css_selector('.result')
    for r in results:
        if 'selenium-python' in r.text:
            print("找到了")
            break


def main():
    add_chrome_webdriver()

    o = Options()
    o.add_argument("--headless")
    o.add_argument("--no-sandbox")
    browser = webdriver.Chrome(chrome_options=o)
    try:
        find_website(browser)
    finally:
        browser.quit()


if __name__ == '__main__':
    main()
    
from time import sleep

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

import secret

import platform

import os


def add_chrome_webdriver():
    print(platform.system())
    working_path = os.getcwd()
    library = 'library'
    path = os.path.join(working_path, library)
    os.environ['PATH'] += '{}{}{}'.format(os.pathsep, path, os.pathsep)
    print(os.environ['PATH'])


def add_cookie(browser):
    print('before', browser.get_cookies())
    for part in secret.cookie.split('; '):
        kv = part.split('=')
        d = dict(
            name=kv[0],
            value=kv[1],
            path='/',
            domain='.zhihu.com',
            secure=True
        )
        print('cookie', d)
        browser.add_cookie(d)
    print('after', browser.get_cookies())


def scroll_to_end(browser):
    browser.execute_script('window.scrollTo(0, document.body.scrollHeight);')


def start_crawler(browser):
    # chrome 有 bug https://bugs.chromium.org/p/chromium/issues/detail?id=617931
    # 不能 --user-data-dir 和 --headless 一起用
    # 改回用 cookie

    url = "https://www.zhihu.com"
    # 先访问一个 url，才能设置这个 url 对应的 cookie
    browser.get(url)
    add_cookie(browser)
    sleep(1)
    # 设置好 cookie 后，刷新页面即可进入登录状态
    browser.get(url)
    sleep(1)

    scroll_to_end(browser)

    while True:
        print('loop')
        cards = browser.find_elements_by_css_selector('.Card.TopstoryItem')
        for card in cards:
            source = card.find_element_by_css_selector('.FeedSource-firstline')
            if '1 天前' in source.text:
                print('拿到了最近1天动态')
                titles = browser.find_elements_by_css_selector('.ContentItem-title')
                for title in titles:
                    print(title.text)
                return
            else:
                scroll_to_end(browser)
                continue


def main():
    add_chrome_webdriver()

    o = Options()
    # o.add_argument("--headless")
    o.add_argument("--no-sandbox")
    browser = webdriver.Chrome(chrome_options=o)
    try:
        start_crawler(browser)
    finally:
        browser.quit()


if __name__ == '__main__':
    main()
